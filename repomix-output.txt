This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-10T15:27:30.078Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  favicon.svg
src/
  components/
    astro/
      Footer.astro
      Header.astro
      LanguagePicker.astro
      Newsletter.astro
      seo.astro
    react/
      MobileNav.tsx
      ThemeToggle.tsx
      Toast.tsx
  content/
    home/
      en.json
      pl.json
    config.ts
  i18n/
    ui/
      en.json
    ui.ts
    utils.ts
  layouts/
    BaseLayout.astro
  pages/
    api/
      subscribe.ts
    pl/
      index.astro
    debug.astro
    index.astro
  env.d.ts
.gitignore
astro.config.mjs
package.json
README.md
tailwind.config.mjs
tsconfig.json

================================================================
Files
================================================================

================
File: public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>

================
File: src/components/astro/Footer.astro
================
---
// src/components/astro/Footer.astro
import { useTranslations } from "../../i18n/utils";
import { X, Mail } from "lucide-react";
import Newsletter from "./Newsletter.astro";

const t = useTranslations(Astro.currentLocale as "en" | "pl");
---

<footer class="py-16 border-t border-gray-600">
  <div class="max-w-3xl mx-auto px-8">
    <div class="mb-12">
      <div class="flex items-center mb-6">
        <span class="text-2xl font-bold">Web3Yoda</span>
      </div>
      <p class="text-gray-400 text-lg">{t("footer.description")}</p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
      <Newsletter />
    </div>

    <div
      class="flex justify-between items-center pt-8 border-t border-gray-600"
    >
      <p class="text-gray-400 text-sm">{t("copyright")}</p>
      <div class="flex space-x-6">
        <a
          href="https://twitter.com/phantom0fweb3"
          class="text-gray-400 hover:text-white transition-colors"
          aria-label="Twitter"
        >
          <X className="h-7 w-7" />
        </a>
        <a
          href="mailto:web3yoda.xyz@pm.me"
          class="text-gray-400 hover:text-white transition-colors"
          aria-label="Email"
        >
          <Mail className="h-7 w-7" />
        </a>
      </div>
    </div>
  </div>
</footer>

================
File: src/components/astro/Header.astro
================
---
// src/components/astro/Header.astro
import LanguagePicker from "./LanguagePicker.astro";
import { useTranslations } from "@/i18n/utils";

const t = useTranslations(Astro.currentLocale as "en" | "pl");
---

<header
  class="fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-sm border-b border-gray-800"
>
  <div class="max-w-3xl mx-auto px-8">
    <div class="flex items-center justify-between h-28">
      <a href="/" class="flex items-center group">
        <svg
          class="w-20 h-20 transition-transform duration-300 group-hover:scale-110"
          viewBox="0 0 64 64"
        >
          <rect x="16" y="8" width="32" height="32" fill="#ffffff"></rect>
          <rect x="24" y="16" width="4" height="4" fill="#000000"></rect>
          <rect x="36" y="16" width="4" height="4" fill="#000000"></rect>
          <rect x="24" y="28" width="16" height="4" fill="#000000"></rect>
        </svg>
        <span class="ml-3 text-xl font-bold">Web3Yoda</span>
      </a>

      <nav class="flex items-center space-x-8">
        <LanguagePicker />
        <a
          href="https://twitter.com/phantom0fweb3"
          class="text-gray-400 hover:text-white transition-colors duration-300"
        >
          {t("nav.twitter")}
        </a>
        <a
          href="https://cal.com/web3yoda/15min"
          class="px-4 py-2 bg-white text-black font-bold hover:bg-gray-400 hover:text-white transition-colors duration-300 ease-in-out"
        >
          {t("nav.schedule")}
        </a>
      </nav>
    </div>
  </div>
</header>

<div class="h-28"></div>

================
File: src/components/astro/LanguagePicker.astro
================
---
// /src/components/astro/LanguagePicker.astro
import { languages } from "../../i18n/ui";
---

<style>
  .custom-select {
    appearance: none;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="gray"><path d="M5.5 8l4.5 4.5L14.5 8H5.5z"/></svg>');
    background-repeat: no-repeat;
    background-position: right 10px center;
    background-size: 16px;
    padding-right: 30px;
  }
</style>

<select
  class="custom-select bg-transparent border border-gray-600 rounded px-3 py-2 text-gray-400 focus:border-white transition-colors"
  onchange="window.location.pathname = this.value"
>
  {
    Object.entries(languages).map(([lang, label]) => (
      <option
        value={lang === "en" ? "/" : `/${lang}/`}
        selected={Astro.currentLocale === lang}
      >
        {label}
      </option>
    ))
  }
</select>

================
File: src/components/astro/Newsletter.astro
================
---
// src/components/astro/Newsletter.astro
import { useTranslations } from "../../i18n/utils";
import Toast from "../react/Toast";

const t = useTranslations(Astro.currentLocale as "en" | "pl");
---

<div class="newsletter-form" data-form-container>
  <h3 class="font-bold mb-4">{t("newsletter.title")}</h3>
  <p class="text-gray-400 mb-4">{t("newsletter.description")}</p>

  <form data-newsletter-form class="space-y-4">
    <div class="flex gap-2">
      <input
        type="email"
        name="email"
        required
        placeholder="your@email.com"
        class="flex-1 px-4 py-2 bg-transparent border border-gray-600 rounded-md focus:outline-none focus:border-white"
      />
      <button
        type="submit"
        class="px-6 py-2 bg-white text-black font-bold rounded-md hover:bg-gray-200 transition-colors"
      >
        {t("newsletter.button")}
      </button>
    </div>
  </form>

  <div data-toast-container>
    <Toast client:load />
  </div>
</div>

<script>
  // Prevent any other form handlers from interfering
  const formContainer = document.querySelector("[data-form-container]");
  const form = formContainer?.querySelector(
    "[data-newsletter-form]"
  ) as HTMLFormElement;

  if (form) {
    // Remove any existing listeners
    const newForm = form.cloneNode(true) as HTMLFormElement;
    form.parentNode?.replaceChild(newForm, form);

    newForm.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);
      const email = formData.get("email");

      try {
        const response = await fetch("/api/subscribe", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email }),
        });

        const data = await response.json();

        // Dispatch custom event for Toast
        const event = new CustomEvent("show-toast", {
          detail: {
            message: data.success
              ? "Thanks for subscribing!"
              : data.error || "Failed to subscribe",
            type: data.success ? "success" : "error",
          },
        });
        window.dispatchEvent(event);

        if (data.success) {
          newForm.reset();
        }
      } catch (error) {
        const event = new CustomEvent("show-toast", {
          detail: {
            message: "Something went wrong. Please try again.",
            type: "error",
          },
        });
        window.dispatchEvent(event);
      }
    });
  }
</script>

================
File: src/components/astro/seo.astro
================
---
// src/components/astro/SEO.astro
interface Props {
  title: string;
  description: string;
  image?: string;
  canonicalUrl?: string;
  type?: string;
  currentLocale: string;
  alternateUrls: {
    [key: string]: string;
  };
}

const {
  title,
  description,
  image = "/default-og.png",
  canonicalUrl,
  type = "website",
  currentLocale,
  alternateUrls,
} = Astro.props;

// Get the current URL
const currentUrl = Astro.url.href;
---

<!-- Basic Meta Tags -->
<title>{title}</title>
<meta name="description" content={description} />
<link rel="canonical" href={canonicalUrl || currentUrl} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={currentUrl} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />
<meta property="og:locale" content={currentLocale} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={currentUrl} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Language Alternates -->
<link
  rel="alternate"
  href={alternateUrls["x-default"] || alternateUrls["en"]}
  hreflang="x-default"
/>
{
  Object.entries(alternateUrls).map(([lang, url]) => (
    <link rel="alternate" href={url} hreflang={lang} />
  ))
}

<!-- JSON-LD Schema -->
<script
  type="application/ld+json"
  set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "WebSite",
    url: currentUrl,
    name: title,
    description: description,
    inLanguage: currentLocale,
    alternateName: Object.values(alternateUrls),
  })}
/>

================
File: src/components/react/MobileNav.tsx
================
// src/components/react/MobileNav.tsx
import React, { useState } from 'react';
import { Menu, X } from 'lucide-react';

interface NavItem {
  name: string;
  href: string;
}

interface MobileNavProps {
  navItems: NavItem[];
}

const MobileNav: React.FC<MobileNavProps> = ({ navItems }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="md:hidden">
      {/* Hamburger button */}
      <button
        type="button"
        className="inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-500"
        onClick={() => setIsOpen(!isOpen)}
        aria-expanded={isOpen}
      >
        <span className="sr-only">Open main menu</span>
        {isOpen ? (
          <X className="block h-6 w-6" aria-hidden="true" />
        ) : (
          <Menu className="block h-6 w-6" aria-hidden="true" />
        )}
      </button>

      {/* Mobile menu panel */}
      <div
        className={`${
          isOpen ? 'translate-x-0' : 'translate-x-full'
        } fixed top-[5rem] right-0 bottom-0 w-full bg-white dark:bg-gray-900 z-40 transition-transform duration-300 ease-in-out transform`}
      >
        <div className="pt-2 pb-3 space-y-1 px-4">
          {navItems.map((item) => (
            <a
              key={item.name}
              href={item.href}
              className="block py-4 text-base font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800 rounded-md"
              onClick={() => setIsOpen(false)}
            >
              {item.name}
            </a>
          ))}
        </div>
      </div>

      {/* Backdrop */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-25 z-30"
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
};

export default MobileNav;

================
File: src/components/react/ThemeToggle.tsx
================
// src/components/react/ThemeToggle.tsx

import { useEffect, useState } from 'react';
import { Moon, Sun } from 'lucide-react';

export default function ThemeToggle() {
  const [theme, setTheme] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') || 'light'
    }
    return 'light'
  });

  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
    localStorage.setItem('theme', theme)
  }, [theme]);

  return (
    <button
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      className="rounded-md p-2 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-purple-500"
      aria-label="Toggle theme"
    >
      {theme === 'dark' ? (
        <Sun className="h-5 w-5" />
      ) : (
        <Moon className="h-5 w-5" />
      )}
    </button>
  );
}

================
File: src/components/react/Toast.tsx
================
import React, { useEffect, useState } from 'react';
import { X, Check, AlertCircle } from 'lucide-react';

export type ToastType = 'success' | 'error';

export interface ToastEvent {
  message: string;
  type: ToastType;
}

const Toast: React.FC = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [message, setMessage] = useState('');
  const [type, setType] = useState<ToastType>('success');

  useEffect(() => {
    console.log('Toast component mounted');

    const handleToast = (event: CustomEvent<ToastEvent>) => {
      console.log('Toast event received:', event.detail);
      setMessage(event.detail.message);
      setType(event.detail.type);
      setIsVisible(true);
    };

    // We need to cast the event type for TypeScript
    window.addEventListener('show-toast', handleToast as EventListener);

    return () => {
      window.removeEventListener('show-toast', handleToast as EventListener);
    };
  }, []);

  useEffect(() => {
    if (isVisible) {
      console.log('Toast visible with message:', message);
      const timer = setTimeout(() => {
        setIsVisible(false);
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [isVisible, message]);

  if (!isVisible) return null;

  return (
    <div className="fixed bottom-4 right-4 z-50 animate-slide-up">
      <div
        className={`flex items-center gap-2 px-4 py-3 rounded-lg shadow-lg ${
          type === 'success' ? 'bg-green-500' : 'bg-red-500'
        }`}
      >
        {type === 'success' ? (
          <Check className="w-5 h-5 text-white" />
        ) : (
          <AlertCircle className="w-5 h-5 text-white" />
        )}
        <p className="text-white font-medium">{message}</p>
        <button
          onClick={() => setIsVisible(false)}
          className="ml-4 text-white hover:text-gray-200 transition-colors"
          aria-label="Close notification"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
};

export default Toast;

================
File: src/content/home/en.json
================
{
    "hero": {
      "title": "Your Web3 Onboarding Guides",
      "subtitle": "Start your Web3 journey with a seasoned guide who's walked the path before you. Skip the theory and dive into practical blockchain knowledge from someone who lives and breathes it daily."
    },
    "consultations": {
      "title": "Coaching Sessions",
      "items": [
        {
          "title": "Web3 Basics",
          "description": "All you need to start your transition into Web3"
        },
        {
          "title": "NFT & Digital Collectibles",
          "description": "Deep dive into NFTs, digital collectibles & marketplaces"
        },
        {
          "title": "Multi-Chain Mastery",
          "description": "Advanced guidance on navigating multiple blockchain ecosystems"
        }
      ]
    },
    "services": {
      "title": "Services",
      "items": [
        {
          "title": "Custom Tools Development",
          "description": "Building websites and tools with wallets auth and wallets integrations, workflow automations with AI & AI agents, eg. X (Twitter) bots"
        }
      ]
    },
    "discovery": {
      "title": "Free Discovery Call",
      "description": "15 min call to get to know your personal needs",
      "cta": "Schedule a Call"
    },
    "benefits": {
      "title": "Why Choose Web3Yoda?",
      "items": [
        {
          "title": "Battle-Tested Web Veterans",
          "description": "Ex-Googler (SQE team), Web2/Web3 brands founders & builders, with hands-on experience navigating the evolving Web3 landscape."
        },
        {
          "title": "Real-World Experience",
          "description": "Daily practitioners & builders actively using DeFi, trading crypto, perps, NFTs, ordinals & memecoins. We don't just teach it, We live it."
        },
        {
          "title": "Focused Mastery Path",
          "description": "Tailored guidance focusing on exactly what you need to master - no fluff, just practical Web3 skills"
        }
      ]
    }
  }

================
File: src/content/home/pl.json
================
{
    "hero": {
      "title": "Twój przewodnik po świecie web3",
      "subtitle": "Zacznij bezpiecznie korzystać z technologii blockchain. Praktyczna wiedza bez zbędnej teorii"
    },
    "consultations": {
      "title": "Konsultacje",
      "items": [
        {
          "title": "Podstawy Web3",
          "description": "Wszystko, czego potrzebujesz, by przejść gładko z Web2 do Web3 i bezpiecznie się tam poruszać"
        },
        {
          "title": "NFT, ordinals - cyfrowe tokeny kolekcjonerskie",
          "description": "Naucz się kolekcjonować cyfrowe artefakty. Jak i gdzie kupować i przechowywać tokeny NFT w sieciach ETH, SOL, BTC i innych"
        },
        {
          "title": "Bitcoin, Ethereum, Solana? Web3 to wielo-blockchain'owe środowisko",
          "description": "Wskazówki dotyczące poruszania się po różnych ekosystemach blockchain"
        }
      ]
    },
    "services": {
      "title": "Usługi",
      "items": [
        {
          "title": "Budowa spersonalizowanych narzędzi i automatyzacje",
          "description": "Budowa stron www z integracją portfeli / autoryzacją portfelem, automatyzacje procesów z wykorzystaniem AI, np. boty na platformie X (Twitter)"
        }
      ]
    },
    "discovery": {
      "title": "Darmowa Konsultacja",
      "description": "15-minutowa rozmowa, aby poznać Twoje potrzeby",
      "cta": "Umów Rozmowę"
    },
    "benefits": {
      "title": "Dlaczego Web3Yoda?",
      "items": [
        {
          "title": "Weterani Internetu",
          "description": "W Internecie od samego jego początku, wiemy jak poruszać się w tym ciągle zmieniającym się środowisku. Mamy doświadzcenie w tworzeniu i optymalizacji stron i sklepów internetowych, aplikacji web'owych, które zdybywaliśmy w wielkich korporacjach, jak Google, ale i w mniejszych startupach"
        },
        {
          "title": "Doświadczenie Web3 z Pierwszej Ręki",
          "description": "Aktywnie poruszamy się na rynkach krypto, NFT, memecoinów i aktywnie udzielamy się w społecznościach w okół wielu projektów Web3"
        },
        {
          "title": "Konsultacje szyte na miarę",
          "description": "Spersonalizowane wskazówki skupiające się dokładnie na tym, czego potrzebujesz - praktyczne umiejętności Web3"
        }
      ]
    }
  }

================
File: src/content/config.ts
================
// src/content/config.ts
import { defineCollection, z } from 'astro:content';

const homeCollection = defineCollection({
  type: 'data',
  schema: z.object({
    hero: z.object({
      title: z.string(),
      subtitle: z.string()
    }),
    consultations: z.object({
      title: z.string(),
      items: z.array(z.object({
        title: z.string(),
        description: z.string()
      }))
    }),
    services: z.object({
      title: z.string(),
      items: z.array(z.object({
        title: z.string(),
        description: z.string()
      }))
    }),
    discovery: z.object({
      title: z.string(),
      description: z.string(),
      cta: z.string()
    }),
    benefits: z.object({
      title: z.string(),
      items: z.array(z.object({
        title: z.string(),
        description: z.string()
      }))
    })
  })
});

export const collections = {
  'home': homeCollection
};

================
File: src/i18n/ui/en.json
================
{
  "newsletter": {
    "title": "Stay Updated",
    "description": "Get the latest Web3 insights delivered to your inbox.",
    "placeholder": "your@email.com",
    "subscribe": "Subscribe",
    "success": "Thanks for subscribing!",
    "error": {
      "invalid": "Please provide a valid email address",
      "failed": "Failed to subscribe. Please try again.",
      "server": "Server configuration error"
    }
  }
}

================
File: src/i18n/ui.ts
================
// src/i18n/ui.ts

export const languages = {
    en: 'English',
    pl: 'Polski'
} as const;

export const defaultLang = 'en';
export const showDefaultLang = false;

export const ui = {
    en: {
      'meta.description': 'Start your Web3 journey with a seasoned guide. Expert consultations and practical knowledge for Web3 transition.',
      'nav.schedule': 'Schedule a Call',
      'nav.twitter': 'X (Twitter)',
      'newsletter.title': 'Newsletter',
      'newsletter.description': 'Get the latest Web3 insights delivered to your inbox.',
      'newsletter.placeholder': 'Enter your email',
      'newsletter.button': 'Subscribe',
      'footer.description': 'Bridging the gap between Web2 and Web3 through expert guidance and education.',
      'copyright': '© 2024 Web3Yoda. All rights reserved.'
    },
    pl: {
      'meta.description': 'Zacznij bezpiecznie korzystać z technologii blockchain. Praktyczna wiedza bez zbędnej teorii',
      'nav.schedule': 'Umów rozmowę',
      'nav.twitter': 'X (Twitter)',
      'newsletter.title': 'Newsletter',
      'newsletter.description': 'Otrzymuj najnowsze informacje o Web3 prosto na swoją skrzynkę.',
      'newsletter.placeholder': 'Twój email',
      'newsletter.button': 'Subskrybuj',
      'footer.description': 'Łączymy świat Web2 i Web3 poprzez profesjonalne doradztwo i edukację.',
      'copyright': '© 2024 Web3Yoda. Wszelkie prawa zastrzeżone.'
    }
  } as const;
  
  export type UiKey = keyof typeof ui.en;

================
File: src/i18n/utils.ts
================
// src/i18n/utils.ts
import { ui, defaultLang, languages } from './ui';

export function getLocaleFromUrl(url: URL) {
  const [, lang] = url.pathname.split('/');
  if (lang in languages) return lang as keyof typeof languages;
  return defaultLang;
}

export function useTranslations(lang: keyof typeof ui) {
  return function t(key: keyof typeof ui[typeof defaultLang]) {
    return ui[lang][key] || ui[defaultLang][key];
  }
}

export function getLocalizedURL(currentPath: string, locale: string, defaultLocale: string) {
  // Remove the current locale from the path if it exists
  const pathWithoutLocale = currentPath.replace(/^\/[^/]+/, '');

  // Don't add locale prefix for default language
  if (locale === defaultLocale) {
    return pathWithoutLocale || '/';
  }

  // Add the new locale prefix
  return `/${locale}${pathWithoutLocale}`;
}

export function getTranslatedContent(collection: any[], locale: string) {
  return collection.find((entry) => entry.id.startsWith(locale))?.data
    ?? collection.find((entry) => entry.id.startsWith('en'))?.data;
}

================
File: src/layouts/BaseLayout.astro
================
---
// src/layouts/BaseLayout.astro
import Footer from "../components/astro/Footer.astro";
import Header from "../components/astro/Header.astro";
import SEO from "../components/astro/seo.astro";
import {
  getLocaleFromUrl,
  getLocalizedURL,
  useTranslations,
} from "../i18n/utils";
import { languages, defaultLang } from "../i18n/ui";

interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: string;
}

const { title, description, image, type } = Astro.props;

const currentLocale = getLocaleFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const t = useTranslations(currentLocale as "en" | "pl");

// Get the site URL from Astro.site or fallback to current URL origin
const siteUrl = Astro.site?.origin || Astro.url.origin;

// Generate alternate URLs with full URLs for SEO
const alternateUrls = Object.keys(languages).reduce((acc, locale) => {
  const path = getLocalizedURL(currentPath, locale, defaultLang);
  const url = new URL(path, siteUrl).toString();
  return { ...acc, [locale]: url };
}, {});

// Add x-default (usually points to English version)
alternateUrls["x-default"] = alternateUrls["en"];
---

<!doctype html>
<html lang={currentLocale}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <SEO
      title={title}
      description={description || t("meta.description")}
      image={image}
      type={type}
      currentLocale={currentLocale}
      alternateUrls={alternateUrls}
    />

    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Space+Mono:wght@400;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="bg-black text-white font-mono">
    <div class="flex flex-col min-h-screen">
      <Header />
      <main class="flex-grow mx-auto max-w-3xl px-8 py-16">
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

================
File: src/pages/api/subscribe.ts
================
import type { APIRoute } from 'astro';

export const prerender = false;

// Environment variable validation
const BEEHIIV_API_KEY = import.meta.env.BEEHIIV_API_KEY;
const BEEHIIV_PUBLICATION_ID = import.meta.env.BEEHIIV_PUBLICATION_ID;

if (!BEEHIIV_API_KEY || !BEEHIIV_PUBLICATION_ID) {
  console.error('Missing required environment variables');
}

function isValidEmail(email: string): boolean {
  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return email.length <= 320 && emailRegex.test(email);
}

export const POST: APIRoute = async ({ request }) => {
  const headers = {
    'Content-Type': 'application/json'
  };

  try {
    // Validate environment variables
    if (!BEEHIIV_API_KEY || !BEEHIIV_PUBLICATION_ID) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Server configuration error'
        }),
        { status: 500, headers }
      );
    }

    // Parse and validate request
    const body = await request.json();
    const email = body.email?.toString().toLowerCase().trim();

    if (!email || !isValidEmail(email)) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Please provide a valid email address'
        }),
        { status: 400, headers }
      );
    }

    // Call Beehiiv API
    const response = await fetch(
      `https://api.beehiiv.com/v2/publications/${BEEHIIV_PUBLICATION_ID}/subscriptions`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${BEEHIIV_API_KEY}`,
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          email,
          reactivate_existing: true,
          send_welcome_email: true,
          utm_source: 'website',
          double_opt_in: false
        })
      }
    );

    const responseData = await response.json();

    // Handle API response
    if (!response.ok) {
      return new Response(
        JSON.stringify({
          success: false,
          error: 'Failed to subscribe',
          details: responseData
        }),
        { status: response.status, headers }
      );
    }

    return new Response(
      JSON.stringify({
        success: true,
        message: 'Successfully subscribed!'
      }),
      { status: 200, headers }
    );

  } catch (error) {
    console.error('Subscription error:', error);
    return new Response(
      JSON.stringify({
        success: false,
        error: 'An unexpected error occurred'
      }),
      { status: 500, headers }
    );
  }
};

================
File: src/pages/pl/index.astro
================
---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

const homeEntries = await getCollection("home");
const content = homeEntries.find((entry) => entry.id.startsWith("pl"))?.data;

if (!content) {
  throw new Error(`No content found for locale: pl`);
}

const styles = {
  section: "mt-16 pt-8 border-t border-gray-600",
  contentBlock:
    "mb-8 transform transition-transform duration-300 ease-in-out hover:translate-x-2",
  title: "text-xl font-bold mb-2",
  description: "text-gray-400",
  cta: "inline-block px-6 py-3 bg-white text-black font-bold transition-colors duration-300 ease-in-out hover:bg-gray-400 hover:text-white",
};
---

<BaseLayout title={`Web3Yoda - ${content.hero.title}`}>
  <div class="container">
    <header>
      <h1 class="text-4xl font-bold mb-2">{content.hero.title}</h1>
      <p class="text-gray-400 mb-8">{content.hero.subtitle}</p>
    </header>

    <section class={styles.section}>
      <h2 class="text-2xl font-bold mb-8">{content.consultations.title}</h2>
      {
        content.consultations.items.map((item) => (
          <div class={styles.contentBlock}>
            <h3 class={styles.title}>{item.title}</h3>
            <p class={styles.description}>{item.description}</p>
          </div>
        ))
      }
    </section>

    <section class={styles.section}>
      <h2 class="text-2xl font-bold mb-8">{content.services.title}</h2>
      {
        content.services.items.map((item) => (
          <div class={styles.contentBlock}>
            <h3 class={styles.title}>{item.title}</h3>
            <p class={styles.description}>{item.description}</p>
          </div>
        ))
      }
    </section>

    <section class={styles.section}>
      <h2 class="text-2xl font-bold mb-8">{content.discovery.title}</h2>
      <div class={styles.contentBlock}>
        <p class={`${styles.description} mb-4`}>
          {content.discovery.description}
        </p>
        <a href="https://cal.com/web3yoda/15min" class={styles.cta}>
          {content.discovery.cta}
        </a>
      </div>
    </section>

    <section class={styles.section}>
      <h2 class="text-2xl font-bold mb-8">{content.benefits.title}</h2>
      <div class="space-y-12">
        {
          content.benefits.items.map((benefit) => (
            <div class={styles.contentBlock}>
              <h3 class={styles.title}>{benefit.title}</h3>
              <p class={styles.description}>{benefit.description}</p>
            </div>
          ))
        }
      </div>
    </section>
  </div>
</BaseLayout>

================
File: src/pages/debug.astro
================
---
import { getCollection, type CollectionEntry } from "astro:content";
import type { CollectionKey } from "astro:content";

const homeContent = await getCollection("home" as CollectionKey);
console.log("Collection contents:", homeContent);

const content = homeContent.find((entry) => entry.id === "en.json")?.data;
console.log("Found content:", content);
---

<pre>
  Home Collection: {JSON.stringify(homeContent, null, 2)}
  Found Content: {JSON.stringify(content, null, 2)}
</pre>

================
File: src/pages/index.astro
================
---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

const homeEntries = await getCollection("home");
const content = homeEntries.find((entry) => entry.id.startsWith("en"))?.data;

if (!content) {
  throw new Error(`No content found for locale: en`);
}

const styles = {
  section: "mt-16 pt-8 border-t border-gray-600",
  contentBlock:
    "mb-8 transform transition-transform duration-300 ease-in-out hover:translate-x-2",
  title: "text-xl font-bold mb-2",
  description: "text-gray-400",
  cta: "inline-block px-6 py-3 bg-white text-black font-bold transition-colors duration-300 ease-in-out hover:bg-gray-400 hover:text-white",
};
---

<BaseLayout title={`Web3Yoda - ${content.hero.title}`}>
  <div class="container">
    <header>
      <h1 class="text-4xl font-bold mb-2">{content.hero.title}</h1>
      <p class="text-gray-400 mb-8">{content.hero.subtitle}</p>
    </header>

    <section class={styles.section}>
      <h2 class="text-2xl font-bold mb-8">{content.consultations.title}</h2>
      {
        content.consultations.items.map((item) => (
          <div class={styles.contentBlock}>
            <h3 class={styles.title}>{item.title}</h3>
            <p class={styles.description}>{item.description}</p>
          </div>
        ))
      }
    </section>

    <section class={styles.section}>
      <h2 class="text-2xl font-bold mb-8">{content.services.title}</h2>
      {
        content.services.items.map((item) => (
          <div class={styles.contentBlock}>
            <h3 class={styles.title}>{item.title}</h3>
            <p class={styles.description}>{item.description}</p>
          </div>
        ))
      }
    </section>

    <section class={styles.section}>
      <h2 class="text-2xl font-bold mb-8">{content.discovery.title}</h2>
      <div class={styles.contentBlock}>
        <p class={`${styles.description} mb-4`}>
          {content.discovery.description}
        </p>
        <a href="https://cal.com/web3yoda/15min" class={styles.cta}>
          {content.discovery.cta}
        </a>
      </div>
    </section>

    <section class={styles.section}>
      <h2 class="text-2xl font-bold mb-8">{content.benefits.title}</h2>
      <div class="space-y-12">
        {
          content.benefits.items.map((benefit) => (
            <div class={styles.contentBlock}>
              <h3 class={styles.title}>{benefit.title}</h3>
              <p class={styles.description}>{benefit.description}</p>
            </div>
          ))
        }
      </div>
    </section>
  </div>
</BaseLayout>

================
File: src/env.d.ts
================
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />
declare module 'astro:content' {
  interface ContentCollectionConfig {
    home: {
      type: 'data';
      schema: z.ZodObject<{
        hero: z.ZodObject<{
          title: z.ZodString;
          subtitle: z.ZodString;
        }>;
        services: z.ZodArray<z.ZodObject<{
          title: z.ZodString;
          description: z.ZodString;
        }>>;
        benefits: z.ZodArray<z.ZodObject<{
          title: z.ZodString;
          description: z.ZodString;
        }>>;
      }>;
    };
  }
}
interface ImportMetaEnv {
    readonly BEEHIIV_API_KEY: string;
    readonly BEEHIIV_PUBLICATION_ID: string;
  }

  interface ImportMeta {
    readonly env: ImportMetaEnv;
  }

================
File: .gitignore
================
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*


# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

# jetbrains setting folder
.idea/
repopack-output.txt

================
File: astro.config.mjs
================
import { defineConfig } from 'astro/config';
import react from '@astrojs/react';
import tailwind from '@astrojs/tailwind';
import node from '@astrojs/node';

export default defineConfig({
  output: 'server',
  site: 'https://web3yoda.xyz',
  integrations: [react(), tailwind()],
  adapter: node({
    mode: 'standalone'
  }),
  i18n: {
    defaultLocale: 'en',
    locales: ['en', 'pl'],
    routing: {
      prefixDefaultLocale: false
    }
  },
  image: {
    service: {
      entrypoint: 'astro/assets/services/sharp',
      config: {
        limitInputPixels: 0,
        limitOutputPixels: 0,
        maximum: 30000,
      }
    }
  },
  vite: {
    envPrefix: [
      'PUBLIC_',
      'BEEHIIV_'
    ]
  },
  ssr: {
      noExternal: ['react', 'react-dom']
    },
    optimizeDeps: {
      include: ['react', 'react-dom']
    }
});

================
File: package.json
================
{
  "name": "web3yoda",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/node": "^9.0.0",
    "@astrojs/react": "^4.1.2",
    "@astrojs/tailwind": "^5.1.4",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "astro": "^5.1.3",
    "lucide-react": "^0.453.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwindcss": "^3.4.14",
    "typescript": "^5.6.3"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15"
  }
}

================
File: README.md
================
# Astro Starter Kit: Minimal

```sh
npm create astro@latest -- --template minimal
```

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/minimal)
[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/astro/tree/latest/examples/minimal)
[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/withastro/astro?devcontainer_path=.devcontainer/minimal/devcontainer.json)

> 🧑‍🚀 **Seasoned astronaut?** Delete this file. Have fun!

## 🚀 Project Structure

Inside of your Astro project, you'll see the following folders and files:

```text
/
├── public/
├── src/
│   └── pages/
│       └── index.astro
└── package.json
```

Astro looks for `.astro` or `.md` files in the `src/pages/` directory. Each page is exposed as a route based on its file name.

There's nothing special about `src/components/`, but that's where we like to put any Astro/React/Vue/Svelte/Preact components.

Any static assets, like images, can be placed in the `public/` directory.

## 🧞 Commands

All commands are run from the root of the project, from a terminal:

| Command                   | Action                                           |
| :------------------------ | :----------------------------------------------- |
| `npm install`             | Installs dependencies                            |
| `npm run dev`             | Starts local dev server at `localhost:4321`      |
| `npm run build`           | Build your production site to `./dist/`          |
| `npm run preview`         | Preview your build locally, before deploying     |
| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |
| `npm run astro -- --help` | Get help using the Astro CLI                     |

## 👀 Want to learn more?

Feel free to check [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).

================
File: tailwind.config.mjs
================
/** @type {import('tailwindcss').Config} */
export default {
	content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
	theme: {
	  extend: {
		fontFamily: {
		  mono: ['Space Mono', 'monospace'],
		},
		colors: {
		  primary: '#ffffff',
		  background: '#000000',
		  accent: '#666666',
		},
		keyframes: {
		  'slide-up': {
			'0%': { transform: 'translateY(100%)', opacity: '0' },
			'100%': { transform: 'translateY(0)', opacity: '1' },
		  }
		},
		animation: {
		  'slide-up': 'slide-up 0.3s ease-out'
		}
	  },
	},
	plugins: [],
  }

================
File: tsconfig.json
================
{
  "extends": "astro/tsconfigs/strict",
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    }
  }
}
