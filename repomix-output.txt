This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-09T09:05:29.736Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  favicon.svg
src/
  components/
    astro/
      Footer.astro
      Header.astro
    react/
      MobileNav.tsx
      ThemeToggle.tsx
  layouts/
    BaseLayout.astro
  pages/
    index.astro
  env.d.ts
.gitignore
astro.config.mjs
package.json
README.md
tailwind.config.mjs
tsconfig.json

================================================================
Files
================================================================

================
File: public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>

================
File: src/components/astro/Footer.astro
================
---
// src/components/astro/Footer.astro
import { X, Mail } from "lucide-react";
const currentYear = new Date().getFullYear();
---

<footer class="py-16 border-t border-gray-600">
  <div class="max-w-3xl mx-auto px-8">
    <div class="mb-12">
      <div class="flex items-center mb-6">
        <span class="text-2xl font-bold">Web3Yoda</span>
      </div>
      <p class="text-gray-400 text-lg">
        Bridging the gap between Web2 and Web3 through expert guidance and
        education.
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
      <div>
        <h3 class="font-bold mb-4">Newsletter</h3>
        <p class="text-gray-400 mb-4">
          Get the latest Web3 insights delivered to your inbox.
        </p>
        <form class="space-y-2">
          <input
            type="email"
            placeholder="Enter your email"
            class="w-full px-3 py-2 bg-transparent border border-gray-600 text-white placeholder-gray-400 focus:border-white transition-colors"
          />
          <button
            type="submit"
            class="w-full px-3 py-2 bg-white text-black font-bold hover:bg-gray-400 hover:text-white transition-colors duration-300 ease-in-out"
          >
            Subscribe
          </button>
        </form>
      </div>
    </div>

    <div
      class="flex justify-between items-center pt-8 border-t border-gray-600"
    >
      <p class="text-gray-400 text-sm">
        &copy; {currentYear} Web3Yoda. All rights reserved.
      </p>
      <div class="flex space-x-6">
        <a
          href="https://twitter.com/phantom0fweb3"
          class="text-gray-400 hover:text-white transition-colors"
          aria-label="Twitter"
        >
          <X className="h-7 w-7" />
        </a>
        <a
          href="mailto:web3yoda.xyz@pm.me"
          class="text-gray-400 hover:text-white transition-colors"
          aria-label="Email"
        >
          <Mail className="h-7 w-7" />
        </a>
      </div>
    </div>
  </div>
</footer>

================
File: src/components/astro/Header.astro
================
---
// src/components/astro/Header.astro
---

<header
  class="fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-sm border-b border-gray-800"
>
  <div class="max-w-3xl mx-auto px-8">
    <div class="flex items-center justify-between h-28">
      <!-- Logo Section with SVG -->
      <a href="/" class="flex items-center group">
        <svg
          class="w-20 h-20 transition-transform duration-300 group-hover:scale-110"
          viewBox="0 0 64 64"
        >
          <rect x="16" y="8" width="32" height="32" fill="#ffffff"></rect>
          <rect x="24" y="16" width="4" height="4" fill="#000000"></rect>
          <rect x="36" y="16" width="4" height="4" fill="#000000"></rect>
          <rect x="24" y="28" width="16" height="4" fill="#000000"></rect>
        </svg>
        <span class="ml-3 text-xl font-bold">Web3Yoda</span>
      </a>

      <!-- Navigation -->
      <nav class="flex items-center space-x-8">
        <a
          href="https://twitter.com/phantom0fweb3"
          class="text-gray-400 hover:text-white transition-colors duration-300"
        >
          X (Twitter)
        </a>
        <a
          href="#"
          class="px-4 py-2 bg-white text-black font-bold hover:bg-gray-400 hover:text-white transition-colors duration-300 ease-in-out"
        >
          Book a Call
        </a>
      </nav>
    </div>
  </div>
</header>

<!-- Spacer for fixed header -->
<div class="h-28"></div>

================
File: src/components/react/MobileNav.tsx
================
// src/components/react/MobileNav.tsx
import React, { useState } from 'react';
import { Menu, X } from 'lucide-react';

interface NavItem {
  name: string;
  href: string;
}

interface MobileNavProps {
  navItems: NavItem[];
}

const MobileNav: React.FC<MobileNavProps> = ({ navItems }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="md:hidden">
      {/* Hamburger button */}
      <button
        type="button"
        className="inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-100 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-500"
        onClick={() => setIsOpen(!isOpen)}
        aria-expanded={isOpen}
      >
        <span className="sr-only">Open main menu</span>
        {isOpen ? (
          <X className="block h-6 w-6" aria-hidden="true" />
        ) : (
          <Menu className="block h-6 w-6" aria-hidden="true" />
        )}
      </button>

      {/* Mobile menu panel */}
      <div
        className={`${
          isOpen ? 'translate-x-0' : 'translate-x-full'
        } fixed top-[5rem] right-0 bottom-0 w-full bg-white dark:bg-gray-900 z-40 transition-transform duration-300 ease-in-out transform`}
      >
        <div className="pt-2 pb-3 space-y-1 px-4">
          {navItems.map((item) => (
            <a
              key={item.name}
              href={item.href}
              className="block py-4 text-base font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-800 rounded-md"
              onClick={() => setIsOpen(false)}
            >
              {item.name}
            </a>
          ))}
        </div>
      </div>

      {/* Backdrop */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-25 z-30"
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
};

export default MobileNav;

================
File: src/components/react/ThemeToggle.tsx
================
// src/components/react/ThemeToggle.tsx

import { useEffect, useState } from 'react';
import { Moon, Sun } from 'lucide-react';

export default function ThemeToggle() {
  const [theme, setTheme] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') || 'light'
    }
    return 'light'
  });

  useEffect(() => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
    localStorage.setItem('theme', theme)
  }, [theme]);

  return (
    <button
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      className="rounded-md p-2 hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-purple-500"
      aria-label="Toggle theme"
    >
      {theme === 'dark' ? (
        <Sun className="h-5 w-5" />
      ) : (
        <Moon className="h-5 w-5" />
      )}
    </button>
  );
}

================
File: src/layouts/BaseLayout.astro
================
---
// src/layouts/BaseLayout.astro
import Footer from "../components/astro/Footer.astro";
import Header from "../components/astro/Header.astro";

interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = "Web3Yoda - Your trusted guide in the Web3 space",
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Space+Mono:wght@400;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="bg-black text-white font-mono">
    <div class="flex flex-col min-h-screen">
      <Header />
      <main class="flex-grow mx-auto max-w-3xl px-8 py-16">
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<style is:global>
  :root {
    --primary: #ffffff;
    --background: #000000;
    --accent: #666666;
  }
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Space Mono", monospace;
  }
</style>

================
File: src/pages/index.astro
================
---
// src/pages/index.astro

import BaseLayout from "../layouts/BaseLayout.astro";

interface ContentBlock {
  title: string;
  description: string;
}

// Define all content blocks in a single consistent structure
const content = {
  hero: {
    title: "Your Web3 Onboarding Guide",
    description:
      "Start your Web3 journey with a seasoned guide who's walked the path before you. Skip the theory and dive into practical Web3 knowledge from someone who lives and breathes it daily.",
  },
  services: {
    title: "Our Services",
    items: [
      {
        title: "Web3 Basics",
        description: "All you need to start your transition into Web3",
      },
      {
        title: "NFT & Digital Collectibles",
        description: "Deep dive into NFTs, digital collectibles & marketplaces",
      },
      {
        title: "Multi-Chain Mastery",
        description:
          "Advanced guidance on navigating multiple blockchain ecosystems",
      },
      {
        title: "Custom Tools Development",
        description:
          "Twitter bots, wallet integrations, workflow automations & AI agents",
      },
    ] as ContentBlock[],
  },
  discovery: {
    title: "Free Discovery Call",
    description: "15 min call to get to know your personal needs",
    cta: {
      text: "Schedule a Call",
      href: "/book?type=discovery",
    },
  },
  benefits: {
    title: "Why Choose Web3Yoda?",
    items: [
      {
        title: "Battle-Tested Web Veteran",
        description:
          "Ex-Googler (SQE team), Web2 brand founder, with hands-on experience navigating the evolving web3 landscape.",
      },
      {
        title: "Real-World Experience",
        description:
          "Daily practitioner actively trading crypto perps, NFTs, ordinals, memecoins & runes. I don't just teach it, I live it.",
      },
      {
        title: "Focused Mastery Path",
        description:
          "Tailored guidance focusing on exactly what you need to master - no fluff, just practical Web3 skills",
      },
    ] as ContentBlock[],
  },
};

// Common Tailwind classes for reusability
const styles = {
  section: "mt-16 pt-8 border-t border-gray-600",
  contentBlock:
    "mb-8 transform transition-transform duration-300 ease-in-out hover:translate-x-2",
  title: "text-xl font-bold mb-2",
  description: "text-gray-400",
  cta: "inline-block px-6 py-3 bg-white text-black font-bold transition-colors duration-300 ease-in-out hover:bg-gray-400 hover:text-white",
};
---

<BaseLayout title="Web3Yoda - Your Web3 Guide">
  <div class="container">
    <!-- Hero Section -->
    <header>
      <h1 class="text-4xl font-bold mb-2">{content.hero.title}</h1>
      <p class="text-gray-400 mb-8">{content.hero.description}</p>
    </header>

    <!-- Services Section -->
    <section class={styles.section} aria-labelledby="services-title">
      <h2 id="services-title" class="sr-only">{content.services.title}</h2>
      {
        content.services.items.map((service) => (
          <div class={styles.contentBlock}>
            <h3 class={styles.title}>{service.title}</h3>
            <p class={styles.description}>{service.description}</p>
          </div>
        ))
      }

      <!-- Discovery Call CTA -->
      <div class={styles.contentBlock}>
        <h3 class={styles.title}>{content.discovery.title}</h3>
        <p class={`${styles.description} mb-4`}>
          {content.discovery.description}
        </p>
        <a href={content.discovery.cta.href} class={styles.cta}>
          {content.discovery.cta.text}
        </a>
      </div>
    </section>

    <!-- Benefits Section -->
    <section class={styles.section} aria-labelledby="benefits-title">
      <h2 id="benefits-title" class="text-2xl font-bold mb-8">
        {content.benefits.title}
      </h2>
      <div class="space-y-12">
        {
          content.benefits.items.map((benefit) => (
            <div class={styles.contentBlock}>
              <h3 class={styles.title}>{benefit.title}</h3>
              <p class={styles.description}>{benefit.description}</p>
            </div>
          ))
        }
      </div>
    </section>
  </div>
</BaseLayout>

================
File: src/env.d.ts
================
/// <reference path="../.astro/types.d.ts" />

================
File: .gitignore
================
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*


# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

# jetbrains setting folder
.idea/
repopack-output.txt

================
File: astro.config.mjs
================
import { defineConfig } from 'astro/config';
import react from '@astrojs/react';
import tailwind from '@astrojs/tailwind';

export default defineConfig({
  integrations: [react(), tailwind()],
  image: {
    // New image service configuration
    service: {
      entrypoint: 'astro/assets/services/sharp',
      config: {
        limitInputPixels: 0,
        limitOutputPixels: 0,
        maximum: 30000,
      }
    }
  }
});

================
File: package.json
================
{
  "name": "web3yoda",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/react": "^4.1.2",
    "@astrojs/tailwind": "^5.1.4",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "astro": "^5.1.3",
    "lucide-react": "^0.453.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "tailwindcss": "^3.4.14",
    "typescript": "^5.6.3"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.15"
  }
}

================
File: README.md
================
# Astro Starter Kit: Minimal

```sh
npm create astro@latest -- --template minimal
```

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/minimal)
[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/astro/tree/latest/examples/minimal)
[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/withastro/astro?devcontainer_path=.devcontainer/minimal/devcontainer.json)

> 🧑‍🚀 **Seasoned astronaut?** Delete this file. Have fun!

## 🚀 Project Structure

Inside of your Astro project, you'll see the following folders and files:

```text
/
├── public/
├── src/
│   └── pages/
│       └── index.astro
└── package.json
```

Astro looks for `.astro` or `.md` files in the `src/pages/` directory. Each page is exposed as a route based on its file name.

There's nothing special about `src/components/`, but that's where we like to put any Astro/React/Vue/Svelte/Preact components.

Any static assets, like images, can be placed in the `public/` directory.

## 🧞 Commands

All commands are run from the root of the project, from a terminal:

| Command                   | Action                                           |
| :------------------------ | :----------------------------------------------- |
| `npm install`             | Installs dependencies                            |
| `npm run dev`             | Starts local dev server at `localhost:4321`      |
| `npm run build`           | Build your production site to `./dist/`          |
| `npm run preview`         | Preview your build locally, before deploying     |
| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |
| `npm run astro -- --help` | Get help using the Astro CLI                     |

## 👀 Want to learn more?

Feel free to check [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).

================
File: tailwind.config.mjs
================
/** @type {import('tailwindcss').Config} */
export default {
	content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
	theme: {
	  extend: {
		fontFamily: {
		  mono: ['Space Mono', 'monospace'],
		},
		colors: {
		  primary: '#ffffff',
		  background: '#000000',
		  accent: '#666666',
		},
	  },
	},
	plugins: [],
  }

================
File: tsconfig.json
================
{
  "extends": "astro/tsconfigs/strict",
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "src/*"
      ]
    }
  }
}
