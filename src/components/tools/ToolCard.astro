---
// src/components/tools/ToolCard.astro
import type { CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import { useTranslations } from "@/i18n/utils";
import type { Tool } from "@/content/config";

interface Props {
  tool: CollectionEntry<"tools">;
  lang: "en" | "pl";
}

const { tool, lang } = Astro.props;
const t = await useTranslations(lang);

// Get localized content
const localizedContent = tool.data.i18n[lang];

// Ensure localized content exists
if (!localizedContent) {
  throw new Error(`Missing localized content for language: ${lang}`);
}

// Generate tool URL
const toolUrl = `/${lang}/tools/${tool.id.split("/").pop()}`;

// Create tool data for filtering
const toolFilterData = {
  category: tool.data.category,
  ecosystems: tool.data.ecosystems,
  status: tool.data.status,
  pricing: tool.data.metadata?.pricing,
};

// Tailwind classes for consistent styling
const classes = {
  card: "group flex flex-col h-full border border-gray-700 rounded-lg p-6 hover:border-gray-500 transition-colors",
  logoContainer: "w-16 h-16 mb-4 transition-transform group-hover:scale-105",
  logo: "w-full h-full object-contain rounded-lg bg-gray-800 p-2",
  title: "text-xl font-bold mb-2 group-hover:text-white transition-colors",
  description: "text-gray-400 mb-4 line-clamp-2",
  features: "text-sm text-gray-400 space-y-1 mb-6",
  featureItem: "flex items-start",
  metadataRow: "mt-auto pt-4 border-t border-gray-700",
  metadata: "flex flex-wrap gap-2",
  badge: "px-2 py-1 bg-gray-800 rounded text-sm text-gray-300",
  link: "absolute inset-0 z-10",
};
---

<article class="relative" data-tool={JSON.stringify(toolFilterData)}>
  {/* Make entire card clickable while preserving metadata interaction */}
  <a href={toolUrl} class={classes.link}>
    <span class="sr-only">View {localizedContent.title}</span>
  </a>

  <div class={classes.card}>
    {/* Tool Logo */}
    <div class={classes.logoContainer}>
      {
        tool.data.logo ? (
          <Image
            src={tool.data.logo}
            alt={`${localizedContent.title} logo`}
            width={64}
            height={64}
            class={classes.logo}
          />
        ) : (
          <div class={`${classes.logo} flex items-center justify-center`}>
            <span class="text-xs text-gray-400">No logo</span>
          </div>
        )
      }
    </div>

    {/* Tool Info */}
    <h3 class={classes.title}>{localizedContent.title}</h3>
    <p class={classes.description}>{localizedContent.description}</p>

    {/* Features Preview */}
    {
      localizedContent.features.length > 0 && (
        <ul class={classes.features}>
          {localizedContent.features.slice(0, 3).map((feature) => (
            <li class={classes.featureItem}>
              <span class="mr-2">â€¢</span>
              {feature}
            </li>
          ))}
        </ul>
      )
    }

    {/* Metadata Row */}
    <div class={classes.metadataRow}>
      <div class={classes.metadata}>
        {/* Status Badge */}
        <span class={classes.badge}>
          {t(`tools.status.${tool.data.status}`)}
        </span>

        {/* Primary Ecosystem Badge */}
        <span class={classes.badge}>
          {t(`tools.ecosystems.${tool.data.ecosystems[0]}`)}
        </span>

        {/* Pricing Badge (if available) */}
        {
          tool.data.metadata?.pricing && (
            <span class={classes.badge}>
              {t(`tools.pricing.${tool.data.metadata.pricing}`)}
            </span>
          )
        }
      </div>
    </div>
  </div>
</article>
