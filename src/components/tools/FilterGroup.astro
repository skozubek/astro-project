---
import FilterSelect from "./FilterSelect.astro";
import type { SupportedLanguages } from "@/i18n/i18n-config";
import { useTranslations } from "@/i18n/utils";

interface Props {
  lang: SupportedLanguages;
  filterOptions: {
    ecosystem: Array<{ value: string; label: string }>;
    category: Array<{ value: string; label: string }>;
    status: Array<{ value: string; label: string }>;
  };
  translations: {
    ecosystem: string;
    category: string;
    status: string;
  };
}

const { lang, filterOptions, translations } = Astro.props;
const t = await useTranslations(lang);

const url = new URL(Astro.request.url);
const searchParams = new URLSearchParams(url.search);
const currentFilters = {
  category: searchParams.get("category") || "all",
  ecosystem: searchParams.get("ecosystem") || "all",
  status: searchParams.get("status") || "all",
};
---

<div
  class="filter-groups"
  data-filter-group
  data-initial-filters={JSON.stringify(currentFilters)}
>
  <FilterSelect
    label={translations.ecosystem}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.ecosystem,
    ]}
    dataFilter="ecosystem"
    className="w-full min-w-[220px]"
  />

  <FilterSelect
    label={translations.category}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.category,
    ]}
    dataFilter="category"
    className="w-full min-w-[220px]"
  />

  <FilterSelect
    label={translations.status}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.status,
    ]}
    dataFilter="status"
    className="w-full min-w-[220px]"
  />
</div>

<style>
  .filter-groups {
    @apply mb-12 grid grid-cols-1 sm:grid-cols-3 gap-4;
  }

  .filter-group {
    @apply w-full;
    min-width: 220px;
  }

  .filter-group :global(.filter-select) {
    @apply w-full bg-transparent border border-gray-600 rounded px-3 py-2 text-gray-400;
  }

  .filter-group :global(.filter-select:hover) {
    @apply border-gray-400;
  }

  .filter-group :global(.filter-select:focus) {
    @apply border-white outline-none;
  }
</style>

<script>
  function initializeFilterGroup() {
    const filterGroup = document.querySelector("[data-filter-group]");
    if (!filterGroup) return;

    const initialFilters = JSON.parse(
      filterGroup.getAttribute("data-initial-filters") || "{}"
    );

    const filters = filterGroup.querySelectorAll("[data-filter]");
    const toolCards = document.querySelectorAll("[data-tool]");

    filters.forEach((filter) => {
      const filterType = filter.getAttribute("data-filter");
      if (filterType && initialFilters[filterType]) {
        (filter as HTMLSelectElement).value = initialFilters[filterType];
      }
    });

    function updateFilters() {
      const activeFilters = Array.from(filters).reduce(
        (acc, filter) => {
          const value = (filter as HTMLSelectElement).value;
          const filterType = filter.getAttribute("data-filter");
          if (value !== "all" && filterType) {
            acc[filterType] = value;
          }
          return acc;
        },
        {} as Record<string, string>
      );

      const params = new URLSearchParams();
      Object.entries(activeFilters).forEach(([key, value]) => {
        params.set(key, value);
      });

      const newUrl = `${window.location.pathname}${
        params.toString() ? "?" + params.toString() : ""
      }`;

      history.pushState({}, "", newUrl);

      toolCards.forEach((card) => {
        const toolData = JSON.parse(card.getAttribute("data-tool") || "{}");
        const isVisible = Object.entries(activeFilters).every(
          ([key, value]) => {
            if (key === "ecosystem") {
              return toolData.ecosystems.includes(value);
            }
            return toolData[key] === value;
          }
        );

        card.classList.toggle("hidden", !isVisible);
      });
    }

    filters.forEach((filter) => {
      filter.addEventListener("change", updateFilters);
    });

    updateFilters();
  }

  document.addEventListener("astro:page-load", initializeFilterGroup);
</script>
