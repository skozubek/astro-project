---
// src/components/tools/FilterGroup.astro
import FilterSelect from "./FilterSelect.astro";
import type { SupportedLanguages } from "@/i18n/i18n-config";
import { useTranslations } from "@/i18n/utils";

interface Props {
  lang: SupportedLanguages;
  filterOptions: {
    ecosystem: Array<{ value: string; label: string }>;
    category: Array<{ value: string; label: string }>;
    status: Array<{ value: string; label: string }>;
  };
  translations: {
    ecosystem: string;
    category: string;
    status: string;
  };
}

const { lang, filterOptions, translations } = Astro.props;
const t = await useTranslations(lang);

const url = new URL(Astro.request.url);
const searchParams = new URLSearchParams(url.search);
const initialFilters = {
  category: searchParams.get("category") || "all",
  ecosystem: searchParams.get("ecosystem") || "all",
  status: searchParams.get("status") || "all",
};
---

<div
  class="filter-groups mb-12 grid grid-cols-1 sm:grid-cols-3 gap-4"
  data-filter-group
>
  <FilterSelect
    label={translations.ecosystem}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.ecosystem,
    ]}
    dataFilter="ecosystem"
    className="w-full min-w-[220px]"
  />

  <FilterSelect
    label={translations.category}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.category,
    ]}
    dataFilter="category"
    className="w-full min-w-[220px]"
  />

  <FilterSelect
    label={translations.status}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.status,
    ]}
    dataFilter="status"
    className="w-full min-w-[220px]"
  />
</div>

<script>
  function updateVisibility() {
    const params = new URLSearchParams(window.location.search);

    document.querySelectorAll("[data-tool]").forEach((card) => {
      const data = JSON.parse(card.getAttribute("data-tool") || "{}");
      const isVisible = ["ecosystem", "category", "status"].every(
        (filterType) => {
          const value = params.get(filterType) || "all";
          if (value === "all") return true;
          if (filterType === "ecosystem")
            return data.ecosystems.includes(value);
          return data[filterType] === value;
        }
      );

      card.classList.toggle("hidden", !isVisible);
    });

    // Update filter controls based on URL parameters
    document
      .querySelectorAll<HTMLSelectElement>("[data-filter]")
      .forEach((select) => {
        const filterType = select.dataset.filter;
        const value = params.get(filterType) || "all";
        select.value = value;
      });
  }

  // Handle filter changes
  document.addEventListener("change", (e) => {
    const select = e.target;
    if (
      !(select instanceof HTMLSelectElement) ||
      !select.matches("[data-filter]")
    )
      return;

    const params = new URLSearchParams(window.location.search);
    const filterType = select.dataset.filter;

    if (select.value === "all") {
      params.delete(filterType);
    } else {
      params.set(filterType, select.value);
    }

    const newUrl =
      window.location.pathname +
      (params.toString() ? `?${params.toString()}` : "");

    // Only update if URL is actually changing
    if (newUrl !== window.location.pathname + window.location.search) {
      history.replaceState({ filters: Object.fromEntries(params) }, "", newUrl);
      updateVisibility();
    }
  });

  // Initial visibility update
  updateVisibility();

  // Handle back/forward
  window.addEventListener("popstate", (event) => {
    updateVisibility();
  });
</script>
