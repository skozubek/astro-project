---
// src/components/tools/FilterGroup.astro
import FilterSelect from "./FilterSelect.astro";
import type { SupportedLanguages } from "@/i18n/i18n-config";
import { useTranslations } from "@/i18n/utils";

interface Props {
  lang: SupportedLanguages;
  filterOptions: {
    ecosystem: Array<{ value: string; label: string }>;
    category: Array<{ value: string; label: string }>;
    status: Array<{ value: string; label: string }>;
  };
  translations: {
    ecosystem: string;
    category: string;
    status: string;
  };
}

const { lang, filterOptions, translations } = Astro.props;
const t = await useTranslations(lang);

// Get initial filters from URL
const url = new URL(Astro.request.url);
const searchParams = new URLSearchParams(url.search);
const initialFilters = {
  category: searchParams.get("category") || "all",
  ecosystem: searchParams.get("ecosystem") || "all",
  status: searchParams.get("status") || "all",
};
---

<div
  class="filter-groups mb-12 grid grid-cols-1 sm:grid-cols-3 gap-4"
  data-filter-group
>
  <FilterSelect
    label={translations.ecosystem}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.ecosystem,
    ]}
    dataFilter="ecosystem"
    className="w-full min-w-[220px]"
  />

  <FilterSelect
    label={translations.category}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.category,
    ]}
    dataFilter="category"
    className="w-full min-w-[220px]"
  />

  <FilterSelect
    label={translations.status}
    options={[
      { value: "all", label: t("tools.filters.all") },
      ...filterOptions.status,
    ]}
    dataFilter="status"
    className="w-full min-w-[220px]"
  />
</div>

<script>
  // Update tools visibility based on URL parameters
  function updateFromURL() {
    // Get current URL parameters
    const params = new URLSearchParams(window.location.search);

    // Update select elements to match URL
    document.querySelectorAll("[data-filter]").forEach((filter) => {
      const select = filter as HTMLSelectElement;
      const filterType = select.dataset.filter;
      select.value = params.get(filterType) || "all";
    });

    // Update tool visibility
    document.querySelectorAll("[data-tool]").forEach((card) => {
      const toolData = JSON.parse(card.getAttribute("data-tool") || "{}");
      const isVisible = ["ecosystem", "category", "status"].every(
        (filterType) => {
          const filterValue = params.get(filterType) || "all";
          if (filterValue === "all") return true;
          if (filterType === "ecosystem") {
            return toolData.ecosystems.includes(filterValue);
          }
          return toolData[filterType] === filterValue;
        }
      );

      card.classList.toggle("hidden", !isVisible);
    });
  }

  // Handle filter changes
  document.querySelectorAll("[data-filter]").forEach((filter) => {
    filter.addEventListener("change", () => {
      // Build URL parameters from current filter values
      const params = new URLSearchParams(window.location.search);
      const select = filter as HTMLSelectElement;
      const filterType = select.dataset.filter;

      if (select.value === "all") {
        params.delete(filterType);
      } else {
        params.set(filterType, select.value);
      }

      // Update URL and history
      const newUrl = `${window.location.pathname}${params.toString() ? "?" + params.toString() : ""}`;
      window.history.pushState({}, "", newUrl);

      // Update visibility
      updateFromURL();
    });
  });

  // Handle browser navigation
  window.addEventListener("popstate", () => {
    updateFromURL();
  });

  // Initial setup
  updateFromURL();
</script>
