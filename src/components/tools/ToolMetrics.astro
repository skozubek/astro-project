---
// src/components/tools/ToolMetrics.astro
import type { XMetrics } from "@/content/config";
import { useTranslations } from "@/i18n/utils";
import type { SupportedLanguages } from "@/i18n/i18n-config";

interface Props {
  metrics: XMetrics;
  lang: SupportedLanguages;
}

const { metrics, lang } = Astro.props;
const t = await useTranslations(lang);

// Ensure metrics exist
if (!metrics) return null;

const {
  followers,
  monthlyStats,
  weeklyStats,
  lastTweetDate,
  lastMetricsUpdate,
} = metrics;

// Utility functions
const formatNumber = (num: number): string => {
  if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
  if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
  return num.toString();
};

const formatPercentage = (num: number): string => {
  return `${num > 0 ? "+" : ""}${num.toFixed(1)}%`;
};

const formatDate = (date: Date): string => {
  return new Intl.DateTimeFormat(lang, {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  }).format(new Date(date));
};

// Style classes following project patterns
const classes = {
  container: "bg-gray-900 rounded-lg p-6 my-8",
  header: "mb-6",
  title: "text-2xl font-bold mb-2",
  description: "text-gray-400",
  grid: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6",
  card: "bg-gray-800 rounded-lg p-4",
  cardHeader: "flex items-center gap-2 mb-4 text-gray-300",
  icon: "w-5 h-5",
  statsRow: "flex justify-between items-center",
  label: "text-gray-400",
  value: "font-bold",
  footer: "mt-6 text-sm text-gray-400 flex flex-wrap items-center gap-6",
  footerItem: "flex items-center gap-2",
};

// Growth indicator color
const getGrowthColor = (growth: number): string => {
  if (growth > 0) return "text-green-400";
  if (growth < 0) return "text-red-400";
  return "text-gray-400";
};
---

<div class={classes.container}>
  {/* Header */}
  <div class={classes.header}>
    <h2 class={classes.title}>{t("tools.metrics.sectionTitle")}</h2>
    <p class={classes.description}>{t("tools.metrics.description")}</p>
  </div>

  {/* Metrics Grid */}
  <div class={classes.grid}>
    {/* Followers Card */}
    <div class={classes.card}>
      <div class={classes.cardHeader}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
          <circle cx="9" cy="7" r="4"></circle>
          <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
          <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
        </svg>
        <span>{t("tools.metrics.followers")}</span>
      </div>
      <div class="flex items-baseline gap-3">
        <span class="text-2xl font-bold">{formatNumber(followers)}</span>
        <span class={getGrowthColor(monthlyStats.followersGrowth)}>
          {formatPercentage(monthlyStats.followersGrowth)}
        </span>
      </div>
    </div>

    {/* Monthly Stats Card */}
    <div class={classes.card}>
      <div class={classes.cardHeader}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <line x1="18" y1="20" x2="18" y2="10"></line>
          <line x1="12" y1="20" x2="12" y2="4"></line>
          <line x1="6" y1="20" x2="6" y2="14"></line>
        </svg>
        <span>{t("tools.metrics.monthly.tweets")}</span>
      </div>
      <div class="space-y-2">
        <div class={classes.statsRow}>
          <span class={classes.label}>Tweets</span>
          <span class={classes.value}>{monthlyStats.tweets}</span>
        </div>
        <div class={classes.statsRow}>
          <span class={classes.label}
            >{t("tools.metrics.monthly.engagement")}</span
          >
          <span class={classes.value}>
            {formatNumber(monthlyStats.avgLikes)} / {
              formatNumber(monthlyStats.avgRetweets)
            }
          </span>
        </div>
      </div>
    </div>

    {/* Weekly Stats Card */}
    <div class={classes.card}>
      <div class={classes.cardHeader}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <path d="M23 6l-9.5 9.5-5-5L1 18"></path>
          <path d="M17 6h6v6"></path>
        </svg>
        <span>{t("tools.metrics.weekly.tweets")}</span>
      </div>
      <div class="space-y-2">
        <div class={classes.statsRow}>
          <span class={classes.label}>Tweets</span>
          <span class={classes.value}>{weeklyStats.tweets}</span>
        </div>
        <div class={classes.statsRow}>
          <span class={classes.label}>{t("tools.metrics.weekly.growth")}</span>
          <span
            class={`${classes.value} ${getGrowthColor(weeklyStats.followersGrowth)}`}
          >
            {formatPercentage(weeklyStats.followersGrowth)}
          </span>
        </div>
      </div>
    </div>
  </div>

  {/* Footer with timestamps */}
  <div class={classes.footer}>
    <div class={classes.footerItem}>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        aria-hidden="true"
      >
        <circle cx="12" cy="12" r="10"></circle>
        <polyline points="12 6 12 12 16 14"></polyline>
      </svg>
      <span
        >{t("tools.metrics.lastUpdate")}: {formatDate(lastMetricsUpdate)}</span
      >
    </div>
    <div class={classes.footerItem}>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        aria-hidden="true"
      >
        <path
          d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"
        ></path>
      </svg>
      <span>{t("tools.metrics.lastTweet")}: {formatDate(lastTweetDate)}</span>
    </div>
  </div>
</div>
