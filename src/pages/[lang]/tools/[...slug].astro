---
// src/pages/[lang]/tools/[...slug].astro
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getLocaleFromUrl, useTranslations } from "@/i18n/utils";
import { languages, type SupportedLanguages } from "@/i18n/i18n-config";

// Add prerender flag
export const prerender = true;

export async function getStaticPaths() {
  const tools = await getCollection("tools");

  // Generate paths for all tools in all supported languages
  return tools.flatMap((tool) => {
    const slug = tool.id.split("/").pop();

    // Create a route for each supported language
    return Object.keys(languages).map((lang) => ({
      params: { lang, slug },
      props: { tool },
    }));
  });
}

// Get page props
const { tool } = Astro.props;
const lang = getLocaleFromUrl(Astro.url) as SupportedLanguages;
const t = await useTranslations(lang);

// Get localized content
const localizedContent = tool.data.i18n[lang];

// Ensure localized content exists
if (!localizedContent) {
  throw new Error(`Missing localized content for language: ${lang}`);
}

// Format date for display
const formattedDate = new Intl.DateTimeFormat(lang, {
  year: "numeric",
  month: "long",
  day: "numeric",
}).format(tool.data.lastUpdated);

// Tailwind classes for styling
const classes = {
  header: "mb-12 border-b border-gray-700 pb-8",
  logoContainer: "w-24 h-24 mb-6",
  logo: "w-full h-full object-contain rounded-lg bg-gray-800 p-2",
  title: "text-4xl font-bold mb-4",
  description: "text-xl text-gray-400 mb-6",
  metadata: "flex flex-wrap gap-4 mb-6",
  badge: "px-3 py-1 bg-gray-800 rounded-full text-sm",
  links: "flex gap-4",
  primaryLink:
    "px-4 py-2 bg-white text-black font-bold rounded hover:bg-gray-200 transition-colors",
  secondaryLink:
    "px-4 py-2 border border-gray-600 rounded hover:border-gray-400 transition-colors",
  section: "mb-12",
  sectionTitle: "text-2xl font-bold mb-4",
  sectionContent: "text-gray-300 leading-relaxed",
  keyFeatures: "grid gap-8 md:grid-cols-2 lg:grid-cols-3",
  featureCard:
    "border border-gray-700 rounded-lg p-6 hover:border-gray-500 transition-colors",
  featureTitle: "text-xl font-bold mb-4",
  featureList: "space-y-2 text-gray-300",
  featureItem: "flex items-start gap-2",
  footer: "mt-16 pt-8 border-t border-gray-700 text-sm text-gray-400",
};
---

<BaseLayout
  title={`${localizedContent.title} - ${t("tools.title")}`}
  description={localizedContent.description}
>
  <article class="max-w-4xl mx-auto px-4">
    {/* Header Section */}
    <header class={classes.header}>
      <div class="flex items-start gap-6">
        {/* Tool Logo */}
        <div class={classes.logoContainer}>
          {
            tool.data.logo && (
              <Image
                src={tool.data.logo}
                alt={`${localizedContent.title} logo`}
                width={96}
                height={96}
                class={classes.logo}
              />
            )
          }
        </div>

        <div class="flex-grow">
          <h1 class={classes.title}>{localizedContent.title}</h1>
          <p class={classes.description}>{localizedContent.description}</p>

          {/* Metadata Badges */}
          <div class={classes.metadata}>
            <span class={classes.badge}>
              {t(`tools.status.${tool.data.status}`)}
            </span>
            <span class={classes.badge}>
              {t(`tools.categories.${tool.data.category}`)}
            </span>
            {
              tool.data.metadata?.pricing && (
                <span class={classes.badge}>
                  {t(`tools.pricing.${tool.data.metadata.pricing}`)}
                </span>
              )
            }
          </div>

          {/* External Links */}
          <div class={classes.links}>
            <a
              href={tool.data.website}
              target="_blank"
              rel="noopener noreferrer"
              class={classes.primaryLink}
              aria-label={`${t("tools.website")} - ${localizedContent.title}`}
            >
              {t("tools.website")} - {localizedContent.title}
            </a>
            {
              tool.data.github && (
                <a
                  href={tool.data.github}
                  target="_blank"
                  rel="noopener noreferrer"
                  class={classes.secondaryLink}
                >
                  GitHub
                </a>
              )
            }
          </div>
        </div>
      </div>
    </header>

    {/* Content Sections */}
    {
      localizedContent.sections.map((section) => (
        <section class={classes.section}>
          <h2 class={classes.sectionTitle}>{section.title}</h2>
          <div class={classes.sectionContent}>{section.content}</div>
        </section>
      ))
    }

    {/* Key Features Grid */}
    <section class={classes.section}>
      <h2 class={classes.sectionTitle}>{t("tools.key_features")}</h2>
      <div class={classes.keyFeatures}>
        {
          localizedContent.keyFeatures.map((feature) => (
            <div class={classes.featureCard}>
              <h3 class={classes.featureTitle}>{feature.title}</h3>
              <ul class={classes.featureList}>
                {feature.items.map((item) => (
                  <li class={classes.featureItem}>
                    <span class="text-gray-400 mt-1">â€¢</span>
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
            </div>
          ))
        }
      </div>
    </section>

    {/* Footer */}
    <footer class={classes.footer}>
      <p>{t("tools.last_updated")}: {formattedDate}</p>
    </footer>
  </article>
</BaseLayout>
