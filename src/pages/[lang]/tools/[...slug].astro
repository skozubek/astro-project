---
// src/pages/[lang]/tools/[...slug].astro
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getLocaleFromUrl, useTranslations } from "@/i18n/utils";
import { languages, type SupportedLanguages } from "@/i18n/i18n-config";
import ToolMetrics from "@/components/tools/ToolMetrics.astro";

export const prerender = true;

export async function getStaticPaths() {
  const tools = await getCollection("tools");
  return tools.flatMap((tool) => {
    const slug = tool.id.split("/").pop();
    return Object.keys(languages).map((lang) => ({
      params: { lang, slug },
      props: { tool },
    }));
  });
}

const { tool } = Astro.props;
const lang = getLocaleFromUrl(Astro.url) as SupportedLanguages;
const t = await useTranslations(lang);
const localizedContent = tool.data.i18n[lang];

if (!localizedContent) {
  throw new Error(`Missing localized content for language: ${lang}`);
}

const formattedDate = new Intl.DateTimeFormat(lang, {
  year: "numeric",
  month: "long",
  day: "numeric",
}).format(tool.data.lastUpdated);

// Centralized styles using Tailwind classes
const classes = {
  // Header section - full width
  header: "mb-12 border-b border-gray-700 pb-8",
  headerContent: "flex items-start gap-6",
  mainInfo: "flex-grow",

  // Logo styles
  logoContainer: "w-[150px] h-[150px] flex-shrink-0",
  logo: "w-full h-full object-contain rounded-lg bg-gray-800 p-2",

  // Typography
  title: "text-4xl font-bold mb-4",
  description: "text-xl text-gray-400 mb-6",

  // Metadata and badges
  metadata: "flex flex-wrap gap-4 mb-6",
  badge: "px-3 py-1 bg-gray-800 rounded-full text-sm",

  // Links and buttons
  linksContainer: "flex items-center gap-4",
  websiteLink:
    "px-4 py-2 bg-transparent border border-gray-600 rounded text-gray-300 hover:border-gray-400 hover:text-white transition-colors",
  socialLinks: "flex items-center gap-2",
  socialLink: "text-gray-400 hover:text-white transition-colors p-1",

  // Content sections - narrower width
  content: "max-w-4xl mx-auto px-4 sm:px-6 lg:px-8",
  section: "mb-12",
  sectionTitle: "text-2xl font-bold mb-4",
  sectionContent: "text-gray-300 leading-relaxed",

  // Features grid
  featuresGrid: "grid gap-8 md:grid-cols-2 lg:grid-cols-3",
  featureCard:
    "border border-gray-700 rounded-lg p-6 hover:border-gray-500 transition-colors",
  featureTitle: "text-xl font-bold mb-4",
  featureList: "space-y-2 text-gray-300",
  featureItem: "flex items-start gap-2",
  bulletPoint: "text-gray-400 mt-1",

  // Footer
  footer: "mt-16 pt-8 border-t border-gray-700 text-sm text-gray-400",
};

// SEO schema
const toolSchema = {
  "@type": "SoftwareApplication",
  name: localizedContent.title,
  description: localizedContent.description,
  applicationCategory: `Blockchain ${tool.data.category}`,
  operatingSystem: "Web",
  offers: {
    "@type": "Offer",
    price: tool.data.metadata?.pricing === "free" ? "0" : null,
    priceCurrency: "USD",
    availability: "https://schema.org/OnlineOnly",
  },
  featureList: localizedContent.features.join(", "),
  requirements: `Supported blockchains: ${tool.data.ecosystems.join(", ")}`,
  url: tool.data.website,
  dateModified: tool.data.lastUpdated.toISOString(),
  softwareVersion: tool.data.status,
  ...(tool.data.github && {
    codeRepository: tool.data.github,
  }),
};

// Meta tags
const toolMetaTags = [
  {
    name: "keywords",
    content: [
      ...tool.data.ecosystems,
      tool.data.category,
      ...(tool.data.metadata?.tags || []),
      "web3",
      "blockchain",
    ].join(", "),
  },
  {
    name: "application-name",
    content: localizedContent.title,
  },
];
---

<BaseLayout
  title={`${localizedContent.title} - ${t("tools.title")}`}
  description={localizedContent.description}
  schema={toolSchema}
  meta={toolMetaTags}
  robots="index, follow, max-image-preview:large"
  fullWidth={true}
>
  {/* Full-width header section */}
  <header class={classes.header}>
    <div class={classes.headerContent}>
      <div class={classes.logoContainer}>
        {
          tool.data.logo && (
            <Image
              src={tool.data.logo as string}
              alt={`${localizedContent.title} logo`}
              width={150}
              height={150}
              class={classes.logo}
            />
          )
        }
      </div>

      <div class={classes.mainInfo}>
        <h1 class={classes.title}>{localizedContent.title}</h1>
        <p class={classes.description}>{localizedContent.description}</p>

        <div class={classes.metadata}>
          <span class={classes.badge}>
            {t(`tools.status.${tool.data.status}`)}
          </span>
          <span class={classes.badge}>
            {t(`tools.categories.${tool.data.category}`)}
          </span>
          {
            tool.data.metadata?.pricing && (
              <span class={classes.badge}>
                {t(`tools.pricing.${tool.data.metadata.pricing}`)}
              </span>
            )
          }
        </div>

        <div class={classes.linksContainer}>
          <a
            href={tool.data.website}
            target="_blank"
            rel="noopener noreferrer"
            class={classes.websiteLink}
          >
            {t("tools.website")}
          </a>

          <div class={classes.socialLinks}>
            {/* Social links remain the same */}
            {
              tool.data.github && (
                <a
                  href={tool.data.github}
                  target="_blank"
                  rel="noopener noreferrer"
                  class={classes.socialLink}
                  title="GitHub"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22" />
                  </svg>
                </a>
              )
            }
          </div>
        </div>

        {
          tool.data.xMetrics && (
            <ToolMetrics metrics={tool.data.xMetrics} lang={lang} />
          )
        }
      </div>
    </div>
  </header>

  {/* Content sections with narrower width */}
  <div class={classes.content}>
    {/* Tool Sections */}
    {
      localizedContent.sections.map((section) => (
        <section class={classes.section}>
          <h2 class={classes.sectionTitle}>{section.title}</h2>
          <div class={classes.sectionContent}>{section.content}</div>
        </section>
      ))
    }

    {/* Key Features */}
    <section class={classes.section}>
      <h2 class={classes.sectionTitle}>{t("tools.key_features")}</h2>
      <div class={classes.featuresGrid}>
        {
          localizedContent.keyFeatures.map((feature) => (
            <div class={classes.featureCard}>
              <h3 class={classes.featureTitle}>{feature.title}</h3>
              <ul class={classes.featureList}>
                {feature.items.map((item) => (
                  <li class={classes.featureItem}>
                    <span class={classes.bulletPoint}>â€¢</span>
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
            </div>
          ))
        }
      </div>
    </section>

    <footer class={classes.footer}>
      <p>{t("tools.last_updated")}: {formattedDate}</p>
    </footer>
  </div>
</BaseLayout>
