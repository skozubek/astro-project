---
// src/pages/[lang]/tools/index.astro
/**
 * Tools Directory Index Page
 *
 * This page displays a filterable directory of Web3 tools. It supports:
 * - Internationalization (i18n)
 * - Client-side filtering
 * - Responsive grid layout
 * - Accessibility features
 */

import { type CollectionEntry, getCollection } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import ToolCard from "@/components/tools/ToolCard.astro";
import { getLocaleFromUrl, useTranslations } from "@/i18n/utils";
import { languages, type SupportedLanguages } from "@/i18n/i18n-config";
import FilterGroup from "@/components/tools/FilterGroup.astro";

// Enable static pre-rendering at build time
export const prerender = true;

/**
 * Generate static paths for all supported languages
 */
export function getStaticPaths() {
  return Object.keys(languages).map((lang) => ({
    params: { lang },
  }));
}

// Get current language from URL parameters
const { lang } = Astro.params as { lang: SupportedLanguages };
const t = await useTranslations(lang);

// Fetch all tools from the content collection
let tools: CollectionEntry<"tools">[] = [];
try {
  tools = await getCollection("tools");
} catch (error) {
  console.error("Error fetching tools:", error);
}

// Extract unique values for filter options
const ecosystems = [...new Set(tools.flatMap((tool) => tool.data.ecosystems))];
const categories = [...new Set(tools.map((tool) => tool.data.category))];
const statuses = [...new Set(tools.map((tool) => tool.data.status))];

/**
 * Tailwind classes organized by component
 */
const classes = {
  // Header section
  header: "mb-12 border-b border-gray-700 pb-8",
  title: "text-4xl font-bold mb-6",
  description: "text-xl text-gray-400 max-w-3xl",

  // Stats and metrics
  statsContainer: "mt-4 flex gap-4",
  statsBadge:
    "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-800 text-gray-300",

  // Filters section
  filtersContainer: "mb-12 flex flex-col sm:flex-row gap-4 max-w-4xl",
  filterWrapper: "w-full",

  // Tools grid
  toolsGrid: "grid gap-6 grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  noTools: "text-center py-12 text-gray-400",
};

/**
 * Filter options configuration
 */
const filterOptions = {
  ecosystem: ecosystems.map((eco) => ({
    value: eco,
    label: t(`tools.ecosystems.${eco}`),
  })),
  category: categories.map((cat) => ({
    value: cat,
    label: t(`tools.categories.${cat}`),
  })),
  status: statuses.map((status) => ({
    value: status,
    label: t(`tools.status.${status}`),
  })),
};

/**
 * SEO Schema for the tools directory
 */
const directorySchema = {
  "@type": "ItemList",
  name: t("tools.title"),
  description: t("tools.description"),
  numberOfItems: tools.length,
  itemListElement: tools.map((tool, index) => ({
    "@type": "ListItem",
    position: index + 1,
    item: {
      "@type": "SoftwareApplication",
      name: tool.data.i18n[lang].title,
      description: tool.data.i18n[lang].description,
      applicationCategory: `Blockchain ${tool.data.category}`,
      url: `${Astro.url.origin}/${lang}/tools/${tool.id.split("/").pop()}`,
      softwareRequirements: `Supported blockchains: ${tool.data.ecosystems.join(", ")}`,
      aggregateRating: {
        "@type": "AggregateRating",
        ratingValue: "5",
        ratingCount: "1",
        bestRating: "5",
        worstRating: "1",
      },
    },
  })),
};

const directoryMetaTags = [
  {
    name: "keywords",
    content: [
      "web3 tools",
      "blockchain tools",
      ...new Set(tools.flatMap((tool) => tool.data.ecosystems)),
      ...new Set(tools.map((tool) => tool.data.category)),
    ].join(", "),
  },
];
---

<BaseLayout
  title={t("tools.title")}
  description={t("tools.description")}
  schema={directorySchema}
  meta={directoryMetaTags}
  robots="index, follow, max-image-preview:large"
  fullWidth={true}
>
  {/* Header Section */}
  <div class={classes.header}>
    <h1 class={classes.title}>{t("tools.title")}</h1>
    <p class={classes.description}>{t("tools.description")}</p>

    <div class={classes.statsContainer}>
      <span class={classes.statsBadge}>
        {tools.length}
        {t("tools.total_count")}
      </span>
    </div>
  </div>

  {/* Filters Section */}
  <div class={classes.filtersContainer}>
    <FilterGroup
      lang={lang}
      filterOptions={filterOptions}
      translations={{
        ecosystem: t("tools.filters.ecosystem"),
        category: t("tools.filters.category"),
        status: t("tools.filters.status"),
      }}
    />
  </div>

  {/* Tools Grid */}
  {
    tools.length > 0 ? (
      <div class={classes.toolsGrid}>
        {tools.map((tool) => (
          <ToolCard tool={tool} lang={lang} />
        ))}
      </div>
    ) : (
      <p class={classes.noTools}>{t("tools.no_tools_found")}</p>
    )
  }
</BaseLayout>

<script>
  /**
   * Initializes and manages the filtering functionality
   */
  function initializeFilters() {
    const filters = document.querySelectorAll("[data-filter]");
    const toolCards = document.querySelectorAll("[data-tool]");

    // Initialize from URL parameters
    const searchParams = new URLSearchParams(window.location.search);
    const categoryParam = searchParams.get("category");

    // Set initial filter values if URL params exist
    if (categoryParam) {
      const categoryFilter = document.querySelector(
        '[data-filter="category"]'
      ) as HTMLSelectElement;
      if (categoryFilter) {
        categoryFilter.value = categoryParam;
        // Trigger initial filter
        updateFilters();
      }
    }

    // Add change event listeners to all filters
    filters.forEach((filter) => {
      filter.addEventListener("change", updateFilters);
    });

    function updateFilters() {
      // Get current filter values
      const activeFilters = Array.from(filters).reduce(
        (acc, filter) => {
          const value = (filter as HTMLSelectElement).value;
          if (value !== "all") {
            acc[filter.getAttribute("data-filter")!] = value;
          }
          return acc;
        },
        {} as Record<string, string>
      );

      // Update URL with active filters
      const params = new URLSearchParams();
      Object.entries(activeFilters).forEach(([key, value]) => {
        params.set(key, value);
      });
      const newUrl = `${window.location.pathname}${params.toString() ? "?" + params.toString() : ""}`;
      history.pushState({}, "", newUrl);

      // Update visibility of each tool card
      toolCards.forEach((card) => {
        const toolData = JSON.parse(card.getAttribute("data-tool")!);
        const isVisible = Object.entries(activeFilters).every(
          ([key, value]) => {
            if (key === "ecosystem") {
              return toolData.ecosystems.includes(value);
            }
            return toolData[key] === value;
          }
        );

        card.classList.toggle("hidden", !isVisible);
      });
    }
  }

  // Initialize filters when DOM is ready
  document.addEventListener("DOMContentLoaded", initializeFilters);
</script>
